---- Timestamp Matches (111 in 15 files) ----
GameItemManager.cpp (e:\baoluo\ise\examples\game_server\game_core):	Timestamp valid_time;
GamePlayerManager.cpp (e:\baoluo\ise\examples\game_server\game_core):		ptr->valid_time=Timestamp::now()+TOKEN_MAX_VALID_TIME;
GamePlayerManager.cpp (e:\baoluo\ise\examples\game_server\game_core):        (*it).second->valid_time=Timestamp::now()+TOKEN_MAX_VALID_TIME;;
GamePlayerManager.cpp (e:\baoluo\ise\examples\game_server\game_core):        Timestamp temp = ptr->valid_time;
GamePlayerManager.cpp (e:\baoluo\ise\examples\game_server\game_core):        Timestamp ntime=Timestamp::now();
GamePlayerManager.h (e:\baoluo\ise\examples\game_server\game_core):	Timestamp valid_time;
Ise_classes.cpp (main):// 描述: 将 Timestamp 转换成 DateTime
Ise_classes.cpp (main):DateTime& DateTime::operator = (const Timestamp& rhs)
Ise_classes.cpp (main):// class Timestamp
Ise_classes.cpp (main):Timestamp Timestamp::now()
Ise_classes.cpp (main):    Timestamp result;
Ise_classes.cpp (main):void Timestamp::update()
Ise_classes.cpp (main):    value_ = Timestamp::now().value_;
Ise_classes.cpp (main):void Timestamp::setEpochTime(time_t value)
Ise_classes.cpp (main):time_t Timestamp::epochTime() const
Ise_classes.cpp (main):Timestamp::TimeVal Timestamp::epochMilliseconds() const
Ise_classes.cpp (main):string Timestamp::toString(const string& dateSep, const string& dateTimeSep,
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):class Timestamp;
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    DateTime& operator = (const Timestamp& rhs);
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):// class Timestamp - 时间戳类 (毫秒精度)
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):class Timestamp
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp() { value_ = 0; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    explicit Timestamp(TimeVal value) { value_ = value; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp(const Timestamp& src) { value_ = src.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    static Timestamp now();
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp& operator = (const Timestamp& rhs) { value_ = rhs.value_; return *this; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp& operator = (TimeVal rhs) { value_ = rhs; return *this; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp& operator = (const DateTime& rhs) { setEpochTime(rhs.epochTime()); return *this; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool operator == (const Timestamp& rhs) const { return value_ == rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool operator != (const Timestamp& rhs) const { return value_ != rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool operator > (const Timestamp& rhs) const  { return value_ > rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool operator < (const Timestamp& rhs) const  { return value_ < rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool operator >= (const Timestamp& rhs) const { return value_ >= rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool operator <= (const Timestamp& rhs) const { return value_ <= rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp  operator +  (TimeDiff d) const { return Timestamp(value_ + d); }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp  operator -  (TimeDiff d) const { return Timestamp(value_ - d); }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    TimeDiff   operator -  (const Timestamp& rhs) const { return value_ - rhs.value_; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp& operator += (TimeDiff d) { value_ += d; return *this; }
Ise_classes.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp& operator -= (TimeDiff d) { value_ -= d; return *this; }
Ise_classes.h (main):class Timestamp;
Ise_classes.h (main):    DateTime& operator = (const Timestamp& rhs);
Ise_classes.h (main):// class Timestamp - 时间戳类 (毫秒精度)
Ise_classes.h (main):class Timestamp
Ise_classes.h (main):    Timestamp() { value_ = 0; }
Ise_classes.h (main):    explicit Timestamp(TimeVal value) { value_ = value; }
Ise_classes.h (main):    Timestamp(const Timestamp& src) { value_ = src.value_; }
Ise_classes.h (main):    static Timestamp now();
Ise_classes.h (main):    Timestamp& operator = (const Timestamp& rhs) { value_ = rhs.value_; return *this; }
Ise_classes.h (main):    Timestamp& operator = (TimeVal rhs) { value_ = rhs; return *this; }
Ise_classes.h (main):    Timestamp& operator = (const DateTime& rhs) { setEpochTime(rhs.epochTime()); return *this; }
Ise_classes.h (main):    bool operator == (const Timestamp& rhs) const { return value_ == rhs.value_; }
Ise_classes.h (main):    bool operator != (const Timestamp& rhs) const { return value_ != rhs.value_; }
Ise_classes.h (main):    bool operator > (const Timestamp& rhs) const  { return value_ > rhs.value_; }
Ise_classes.h (main):    bool operator < (const Timestamp& rhs) const  { return value_ < rhs.value_; }
Ise_classes.h (main):    bool operator >= (const Timestamp& rhs) const { return value_ >= rhs.value_; }
Ise_classes.h (main):    bool operator <= (const Timestamp& rhs) const { return value_ <= rhs.value_; }
Ise_classes.h (main):    Timestamp  operator +  (TimeDiff d) const { return Timestamp(value_ + d); }
Ise_classes.h (main):    Timestamp  operator -  (TimeDiff d) const { return Timestamp(value_ - d); }
Ise_classes.h (main):    TimeDiff   operator -  (const Timestamp& rhs) const { return value_ - rhs.value_; }
Ise_classes.h (main):    Timestamp& operator += (TimeDiff d) { value_ += d; return *this; }
Ise_classes.h (main):    Timestamp& operator -= (TimeDiff d) { value_ -= d; return *this; }
Ise_event_loop.cpp (main):TimerId EventLoop::executeAt(Timestamp time, const TimerCallback& callback)
Ise_event_loop.cpp (main):    Timestamp time(Timestamp::now() + delay);
Ise_event_loop.cpp (main):    Timestamp time(Timestamp::now() + interval);
Ise_event_loop.cpp (main):    Timestamp expiration;
Ise_event_loop.cpp (main):        Timestamp now(Timestamp::now());
Ise_event_loop.cpp (main):    timerQueue_.processExpiredTimers(Timestamp::now());
Ise_event_loop.cpp (main):TimerId EventLoop::addTimer(Timestamp expiration, INT64 interval, const TimerCallback& callback)
Ise_event_loop.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    TimerId executeAt(Timestamp time, const TimerCallback& callback);
Ise_event_loop.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    TimerId addTimer(Timestamp expiration, INT64 interval, const TimerCallback& callback);
Ise_event_loop.h (main):    TimerId executeAt(Timestamp time, const TimerCallback& callback);
Ise_event_loop.h (main):    TimerId addTimer(Timestamp expiration, INT64 interval, const TimerCallback& callback);
Ise_timer.cpp (main):Timer::Timer(Timestamp expiration, INT64 interval, const TimerCallback& callback) :
Ise_timer.cpp (main):void Timer::restart(Timestamp now)
Ise_timer.cpp (main):        expiration_ = Timestamp(0);
Ise_timer.cpp (main):bool TimerQueue::getNearestExpiration(Timestamp& expiration)
Ise_timer.cpp (main):void TimerQueue::processExpiredTimers(Timestamp now)
Ise_timer.cpp (main):TimerId TimerManager::executeAt(Timestamp time, const TimerCallback& callback)
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timer(Timestamp expiration, INT64 interval, const TimerCallback& callback);
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp expiration() const { return expiration_; }
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    void restart(Timestamp now);
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    Timestamp expiration_;
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    bool getNearestExpiration(Timestamp& expiration);
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    void processExpiredTimers(Timestamp now);
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    typedef std::pair<Timestamp, Timer*> TimerItem;
Ise_timer.h (e:\baoluo\ise\build\linux\debug-install\include\ise\main):    TimerId executeAt(Timestamp time, const TimerCallback& callback);
Ise_timer.h (main):    Timer(Timestamp expiration, INT64 interval, const TimerCallback& callback);
Ise_timer.h (main):    Timestamp expiration() const { return expiration_; }
Ise_timer.h (main):    void restart(Timestamp now);
Ise_timer.h (main):    Timestamp expiration_;
Ise_timer.h (main):    bool getNearestExpiration(Timestamp& expiration);
Ise_timer.h (main):    void processExpiredTimers(Timestamp now);
Ise_timer.h (main):    typedef std::pair<Timestamp, Timer*> TimerItem;
Ise_timer.h (main):    TimerId executeAt(Timestamp time, const TimerCallback& callback);
Main_server.cpp (e:\baoluo\ise\examples\game_server):TimerId AppBusiness::addTimer(Timestamp expiration, INT64 interval, const TimerCallback& callback)
Main_server.h (e:\baoluo\ise\examples\game_server):	TimerId addTimer(Timestamp expiration, INT64 interval, const TimerCallback& callback);
Timer.cpp (e:\baoluo\ise\examples\timer):    iseApp().timerManager().executeAt(Timestamp::now() + 3 * MILLISECS_PER_SECOND,
